// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package iw2016_ett.domain;

import iw2016_ett.domain.Demandante;
import iw2016_ett.domain.Inscripcion;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Inscripcion_Roo_Finder {
    
    public static Long Inscripcion.countFindInscripcionsByDemandante(Demandante demandante) {
        if (demandante == null) throw new IllegalArgumentException("The demandante argument is required");
        EntityManager em = Inscripcion.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Inscripcion AS o WHERE o.demandante = :demandante", Long.class);
        q.setParameter("demandante", demandante);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Inscripcion> Inscripcion.findInscripcionsByDemandante(Demandante demandante) {
        if (demandante == null) throw new IllegalArgumentException("The demandante argument is required");
        EntityManager em = Inscripcion.entityManager();
        TypedQuery<Inscripcion> q = em.createQuery("SELECT o FROM Inscripcion AS o WHERE o.demandante = :demandante", Inscripcion.class);
        q.setParameter("demandante", demandante);
        return q;
    }
    
    public static TypedQuery<Inscripcion> Inscripcion.findInscripcionsByDemandante(Demandante demandante, String sortFieldName, String sortOrder) {
        if (demandante == null) throw new IllegalArgumentException("The demandante argument is required");
        EntityManager em = Inscripcion.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Inscripcion AS o WHERE o.demandante = :demandante");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Inscripcion> q = em.createQuery(queryBuilder.toString(), Inscripcion.class);
        q.setParameter("demandante", demandante);
        return q;
    }
    
}
