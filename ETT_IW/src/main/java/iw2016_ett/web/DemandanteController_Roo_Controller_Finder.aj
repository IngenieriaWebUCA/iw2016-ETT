// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package iw2016_ett.web;

import iw2016_ett.domain.Demandante;
import iw2016_ett.domain.ExperienciaLaboral;
import iw2016_ett.domain.Formacion;
import iw2016_ett.domain.PuestoTrabajo;
import iw2016_ett.web.DemandanteController;
import java.util.Set;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect DemandanteController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByExperiencia", "form" }, method = RequestMethod.GET)
    public String DemandanteController.findDemandantesByExperienciaForm(Model uiModel) {
        uiModel.addAttribute("experiencialaborals", ExperienciaLaboral.findAllExperienciaLaborals());
        return "demandantes/findDemandantesByExperiencia";
    }
    
    @RequestMapping(params = "find=ByExperiencia", method = RequestMethod.GET)
    public String DemandanteController.findDemandantesByExperiencia(@RequestParam("experiencia") Set<ExperienciaLaboral> experiencia, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("demandantes", Demandante.findDemandantesByExperiencia(experiencia, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Demandante.countFindDemandantesByExperiencia(experiencia) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("demandantes", Demandante.findDemandantesByExperiencia(experiencia, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "demandantes/list";
    }
    
    @RequestMapping(params = { "find=ByFormacion", "form" }, method = RequestMethod.GET)
    public String DemandanteController.findDemandantesByFormacionForm(Model uiModel) {
        uiModel.addAttribute("formacions", Formacion.findAllFormacions());
        return "demandantes/findDemandantesByFormacion";
    }
    
    @RequestMapping(params = "find=ByFormacion", method = RequestMethod.GET)
    public String DemandanteController.findDemandantesByFormacion(@RequestParam("formacion") Set<Formacion> formacion, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("demandantes", Demandante.findDemandantesByFormacion(formacion, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Demandante.countFindDemandantesByFormacion(formacion) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("demandantes", Demandante.findDemandantesByFormacion(formacion, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "demandantes/list";
    }
    
    @RequestMapping(params = { "find=ByPuestosInteresa", "form" }, method = RequestMethod.GET)
    public String DemandanteController.findDemandantesByPuestosInteresaForm(Model uiModel) {
        uiModel.addAttribute("puestotrabajoes", PuestoTrabajo.findAllPuestoTrabajoes());
        return "demandantes/findDemandantesByPuestosInteresa";
    }
    
    @RequestMapping(params = "find=ByPuestosInteresa", method = RequestMethod.GET)
    public String DemandanteController.findDemandantesByPuestosInteresa(@RequestParam("puestosInteresa") Set<PuestoTrabajo> puestosInteresa, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("demandantes", Demandante.findDemandantesByPuestosInteresa(puestosInteresa, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Demandante.countFindDemandantesByPuestosInteresa(puestosInteresa) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("demandantes", Demandante.findDemandantesByPuestosInteresa(puestosInteresa, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "demandantes/list";
    }
    
    @RequestMapping(params = { "find=ByUsernameEquals", "form" }, method = RequestMethod.GET)
    public String DemandanteController.findDemandantesByUsernameEqualsForm(Model uiModel) {
        return "demandantes/findDemandantesByUsernameEquals";
    }
    
    @RequestMapping(params = "find=ByUsernameEquals", method = RequestMethod.GET)
    public String DemandanteController.findDemandantesByUsernameEquals(@RequestParam("username") String username, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("demandantes", Demandante.findDemandantesByUsernameEquals(username, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Demandante.countFindDemandantesByUsernameEquals(username) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("demandantes", Demandante.findDemandantesByUsernameEquals(username, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "demandantes/list";
    }
    
}
